代理类

import com.alibaba.fastjson.JSON;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.aspectj.lang.reflect.MethodSignature;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.annotation.AnnotationUtils;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class AspectAudit {
    private static Logger auditLogger= LoggerFactory.getLogger("auditLogger");
    /**
     * 审计日志切点
     */
    @Pointcut("@annotation(com.donggl.log.SystemAuditLog)")
    public void systemAuditLogAspect() {
    }

    /**
     * 后置拦截 用于拦截Controller层记录用户的操作返回，含操作参数记录
     */
    @AfterReturning(value = "systemAuditLogAspect()", returning = "returnValue")
    public void doSystemAuditLog(JoinPoint joinPoint, Object returnValue) {
        SystemAuditLog annotation= AnnotationUtils.findAnnotation(((MethodSignature) joinPoint.getSignature()).getMethod(), SystemAuditLog.class);
        String logname = annotation.logname();
        String s = annotation.detailLogname();
        //类
        String className = joinPoint.getTarget().getClass().getName();
        //请求参数
        Object[] args = joinPoint.getArgs();
        //方法名
        String methodName = joinPoint.getSignature().getName();
        auditLogger.info("打印日志--className:{},methodName:{},请求参数:{},returnValue:{}",className,methodName,JSON.toJSONString(args),JSON.toJSONString(returnValue));
    }
}



枚举类：
import java.lang.annotation.*;

@Target({ElementType.PARAMETER, ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface SystemAuditLog {
    String logname() default "systemAuditLog";
    String detailLogname() default "systemAuditLog";

}

使用：
@RequestMapping("test")
@SystemAuditLog(logname = "test123")
public String context(String str) {
    return "1213";
}