Pom.xml

<dependency>
    <groupId>com.xuxueli</groupId>
    <artifactId>xxl-job-core</artifactId>
    <version>2.2.0</version>
</dependency>


Ymal
# xxl-job
xxl:
  job:
    # 执行器通讯token
    accessToken: 123
    admin:
      # 调度中心部署根地址
      addresses: http://localhost/xxl-job-admin
    executor:
      # 执行器AppName
      appname: config-center-executor
      # 执行器注册
      address:
      # 执行器IP
      ip:
      # 执行器端口（默认9999）
      port: 9999
      # 执行器运行日志文件存储磁盘路径（读写权限）
      logpath: /data/applogs/xxl-job/jobhandler
      # 执行器日志文件保存天数（-1关闭自动清理）
      logretentiondays: 30



配置类

import com.xxl.job.core.executor.impl.XxlJobSpringExecutor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class XxlJobConfig {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Value("${xxl.job.admin.addresses}")
    private String adminAddresses;

    @Value("${xxl.job.accessToken}")
    private String accessToken;

    @Value("${xxl.job.executor.appname}")
    private String appname;

    @Value("${xxl.job.executor.address}")
    private String address;

    @Value("${xxl.job.executor.ip}")
    private String ip;

    @Value("${xxl.job.executor.port}")
    private int port;

    @Value("${xxl.job.executor.logpath}")
    private String logPath;

    @Value("${xxl.job.executor.logretentiondays}")
    private int logRetentionDays;


    @Bean
    public XxlJobSpringExecutor xxlJobExecutor() {
        logger.info(">>>>>>>>>>> xxl-job config init.");
        XxlJobSpringExecutor xxlJobSpringExecutor = new XxlJobSpringExecutor();
        xxlJobSpringExecutor.setAdminAddresses(adminAddresses);
        xxlJobSpringExecutor.setAppname(appname);
        xxlJobSpringExecutor.setAddress(address);
        xxlJobSpringExecutor.setIp(ip);
        xxlJobSpringExecutor.setPort(port);
        xxlJobSpringExecutor.setAccessToken(accessToken);
        xxlJobSpringExecutor.setLogPath(logPath);
        xxlJobSpringExecutor.setLogRetentionDays(logRetentionDays);
        return xxlJobSpringExecutor;
    }

}

执行定时任务类

import com.xxl.job.core.biz.model.ReturnT;
import com.xxl.job.core.handler.annotation.XxlJob;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

@Component
public class EngineExecuteTask {
    private static Logger logger = LoggerFactory.getLogger(EngineExecuteTask.class);
    @XxlJob("engineExecuteTask")
    public ReturnT execute(String params) {
        try {
        } catch (Exception e) {
            logger.error("engineExecuteTask定时任务执行异常", e);
        }
        return ReturnT.SUCCESS;
    }
}

